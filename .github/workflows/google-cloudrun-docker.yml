name: 'Build and Deploy to Cloud Run'

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: '${{secrets.PROJECT_ID}}' # Google Cloud Project ID
  REGION: 'us-central1' # GCP Region - Artifact Registry, Cloud Run
  REPO_NAME: '${{secrets.REPO_NAME}}' # Nombre del Repositorio de Artifact Registry
  SERVICE_CLOUDRUN_NAME: '${{secrets.SERVICE_CLOUDRUN_NAME}}' # Nombre del Repositorio de Cloud Run
  WORKLOAD_IDENTITY_PROVIDER: '${{secrets.WORKLOAD_IDENTITY_PROVIDER}}' # TODO: update to your workload identity provider
  SLACK_WEBHOOK_URL: '${{secrets.SLACK_WEBHOOK_URL}}' 
  SLACK_BOT_TOKEN: '${{secrets.SLACK_BOT_TOKEN}}'

jobs:
  deploy:
    runs-on: 'ubuntu-latest'

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@v4' # actions/checkout@v4

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2' # google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_CRENDETIALS_JSON }}'

      - name: 1. Instalar dependencias
        run: |
          npm install
      
      - name: 2. Instalar Slack-ctrf para personalizar reportes en slack
        run: npm install slack-ctrf

      - name: 3. Run Tests
        run: |
          npm test -- --json --outputFile=test-results/test-results.json
        continue-on-error: true # ContinÃºa aunque los tests fallen

      - name: 4. AnÃ¡lisis con SonarCloud
        uses: SonarSource/sonarcloud-github-action@4006f663ecaf1f8093e8e4abb9227f6041f52216 # uses: SonarSource/sonarcloud-github-action@v2.2.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   # Generate a token on Sonarcloud.io, add it to the secrets of this repo with the name SONAR_TOKEN (Settings > Secrets > Actions > add new repository secret)
        with:
          args:
            -Dsonar.projectKey='${{ secrets.SONAR_PROJECTKEY }}'
            -Dsonar.organization='diego-linares1'
            -Dsonar.sources=src

      - name: 5. Obtener los resultados de SonarCloud
        run: |
          curl -u "${{ secrets.SONAR_TOKEN }}:" \
            "https://sonarcloud.io/api/issues/search?componentKeys=${{ secrets.SONAR_PROJECTKEY }}" \
            -o sonar-results.json
        continue-on-error: true

      - name: 6. NotificaciÃ³n de SonarCloud a Slack
        run: |
          sonar_message=$(jq -r '.issues | length' sonar-results.json)
          if [ "$sonar_message" -gt 0 ]; then
            message="ðŸš¨ *SonarCloud Issues*: $sonar_message issues found in the project."
          else
            message="âœ… *SonarCloud Analysis*: Passed successfully. No issues found."
          fi
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\": \"$message\"}" \
            ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 7. Parsear y enviar los resultados de Jest a Slack
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          RESULTS=$(cat test-results/test-results.json)
          PASSED=$(echo $RESULTS | jq '.numPassedTests')
          FAILED=$(echo $RESULTS | jq '.numFailedTests')
          TOTAL=$(echo $RESULTS | jq '.numTotalTests')
          curl -X POST -H 'Content-type: application/json' --data "{
            \"text\": \"*Test Results:*
            Total: $TOTAL
            Passed: $PASSED
            Failed: $FAILED\"
          }" $SLACK_WEBHOOK_URL
        
      - name: 8. Upload Jest results artifact
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: test-results/test-results.json
          

      - name: 'Docker Auth'
        run: |-
          gcloud auth configure-docker '${{ secrets.REGION }}-docker.pkg.dev'

      - name: 'Build and push container'
        run: |-
         docker build -t "${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.SERVICE_CLOUDRUN_NAME }}:${{ github.sha }}" ./
         docker push "${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.SERVICE_CLOUDRUN_NAME }}:${{ github.sha }}"
        # END - Docker auth and build
      
      - name: 'Deploy to Cloud Run'
        uses: 'google-github-actions/deploy-cloudrun@33553064113a37d688aa6937bacbdc481580be17' # google-github-actions/deploy-cloudrun@v2
        with:
          service: '${{ env.SERVICE_CLOUDRUN_NAME }}'
          region: '${{ env.REGION }}'
          image: '${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.SERVICE_CLOUDRUN_NAME }}:${{ github.sha }}'

      - name: 'Show output'
        run: |2-

          echo ${{ steps.deploy.outputs.url }}

      
