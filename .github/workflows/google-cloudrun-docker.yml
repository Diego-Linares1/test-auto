name: 'Build and Deploy to Cloud Run'

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: '${{secrets.PROJECT_ID}}' # TODO: update to your Google Cloud project ID
  REGION: 'us-central1' # TODO: update to your region
  REPO_NAME: '${{secrets.REPO_NAME}}' # TODO: update to your service name
  SERVICE_CLOUDRUN_NAME: '${{secrets.SERVICE_CLOUDRUN_NAME}}'
  WORKLOAD_IDENTITY_PROVIDER: '${{secrets.WORKLOAD_IDENTITY_PROVIDER}}' # TODO: update to your workload identity provider
  SLACK_WEBHOOK_URL: '${{secrets.SLACK_WEBHOOK_URL}}'
  SLACK_BOT_TOKEN: '${{secrets.SLACK_BOT_TOKEN}}'

jobs:
  deploy:
    runs-on: 'ubuntu-latest'

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@v4' # actions/checkout@v4

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2' # google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_CRENDETIALS_JSON }}'

      - name: 'Install dependencies'
        run: |
          npm install

      - name: 'Run Tests'
        run: |
          npm test -- --json --outputFile=test-results.json || echo "Tests failed"
        continue-on-error: true # Continúa aunque los tests fallen

      - name: Analyze with SonarCloud

        uses: SonarSource/sonarcloud-github-action@4006f663ecaf1f8093e8e4abb9227f6041f52216
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   # Generate a token on Sonarcloud.io, add it to the secrets of this repo with the name SONAR_TOKEN (Settings > Secrets > Actions > add new repository secret)
        with:
          args:
            -Dsonar.projectKey='${{ secrets.SONAR_PROJECTKEY }}'
            -Dsonar.organization='diego-linares1'
            -Dsonar.sources=src
            -Dsonar.host.url=https://sonarcloud.io

      - name: 'Fetch SonarCloud Results'
        run: |
          curl -u "${{ secrets.SONAR_TOKEN }}:" \
            "https://sonarcloud.io/api/issues/search?componentKeys=${{ secrets.SONAR_PROJECTKEY }}" \
            -o sonar-results.json
        continue-on-error: true

      - name: 'Notify via Slack'
        run: |
          # Crear mensaje para SonarCloud
          sonar_message=$(jq -r '.issues | length' sonar-results.json)
          if [ "$sonar_message" -gt 0 ]; then
            message="SonarCloud Issues: $sonar_message issues found in the project."
          else
            message="SonarCloud Analysis passed successfully. No issues found."
          fi
          
          # Enviar mensaje de SonarCloud a Slack
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\": \"$message\"}" \
            ${{ secrets.SLACK_WEBHOOK_URL }}
          
          # Ahora enviar los resultados de Jest (asegúrate de tener el archivo test-results.json)
          jest_results=$(jq -r '.numFailedTests' ./test-results/test-results.json)
          if [ "$jest_results" -gt 0 ]; then
            jest_message="Jest Tests: $jest_results tests failed."
          else
            jest_message="Jest Tests passed successfully."
          fi

          # Enviar mensaje de Jest a Slack
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\": \"$jest_message\"}" \
            ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 'Docker Auth'
        run: |-
          gcloud auth configure-docker '${{ secrets.REGION }}-docker.pkg.dev'

      - name: 'Build and push container'
        run: |-
         docker build -t "${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.SERVICE_CLOUDRUN_NAME }}:${{ github.sha }}" ./
         docker push "${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.SERVICE_CLOUDRUN_NAME }}:${{ github.sha }}"
        # END - Docker auth and build
      
      - name: 'Deploy to Cloud Run'
        uses: 'google-github-actions/deploy-cloudrun@33553064113a37d688aa6937bacbdc481580be17' # google-github-actions/deploy-cloudrun@v2
        with:
          service: '${{ env.SERVICE_CLOUDRUN_NAME }}'
          region: '${{ env.REGION }}'
          image: '${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.SERVICE_CLOUDRUN_NAME }}:${{ github.sha }}'

      - name: 'Show output'
        run: |2-

          echo ${{ steps.deploy.outputs.url }}

      
